services:
  postgres:
    image: postgres:17
    user: "1000:1000"
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=shared_db
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    restart: unless-stopped
    networks:
      - selfnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d shared_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
  immich_postgres:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0
    user: "1000:1000"
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=immich
      - POSTGRES_INITDB_ARGS=--data-checksums
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ./data/immich_postgres:/var/lib/postgresql/data
    command: postgres -c shared_preload_libraries='vectors.so,vchord' -c 'search_path="$user", public, vectors.so' -c logging_collector=on -c max_wal_size=1GB -c shared_buffers=128MB -c wal_compression=on
    restart: unless-stopped
    networks:
      - selfnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d immich"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:fea8b3e67b15729d4bb70589eb03367bab9ad1ee89c876f54327fc7c6e618571
    command: redis-server --maxmemory 128mb --maxmemory-policy noeviction
    restart: unless-stopped
    networks:
      - selfnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M

  paperless:
    user: "${PUID}:${PGID}"
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless
    environment:
      - PAPERLESS_URL=https://paperless.buiducthien.store
      - PAPERLESS_TIME_ZONE=${TZ}
      - PAPERLESS_ADMIN_USER=admin
      - PAPERLESS_ADMIN_PASSWORD=${PAPERLESS_ADMIN_PASSWORD}
      - PAPERLESS_DBHOST=postgres
      - PAPERLESS_DBNAME=paperless_db
      - PAPERLESS_DBUSER=admin
      - PAPERLESS_DBPASS=${POSTGRES_PASSWORD}
      - PAPERLESS_OCR_LANGUAGE=eng
      - PAPERLESS_REDIS=redis://redis:6379
      - PAPERLESS_SECRET_KEY=${PAPERLESS_SECRET_KEY}
      - PUID=${PUID}
      - PGID=${PGID}
      - PAPERLESS_TRUSTED_PROXIES=172.18.0.0/16
    volumes:
      - ./data/paperless/data:/usr/src/paperless/data
      - ./media/paperless/media:/usr/src/paperless/media
      - ./media/paperless/export:/usr/src/paperless/export
      - ./media/paperless/consume:/usr/src/paperless/consume
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M

  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - NEXTCLOUD_ADMIN_USER=admin
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nextcloud_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./data/nextcloud/html:/var/www/html:rw
      - ./data/nextcloud/custom_apps:/var/w...
      - ./data/nextcloud/custom_apps:/var/www/html/custom_apps:rw
      - ./data/nextcloud/config:/var/www/html/config:rw
      - ./data/nextcloud/data:/var/www/html/data:rw
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    networks:
      - selfnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status.php"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2283/health"]
      interval: 30s
      timeout: 15s
      retries: 10
    environment:
      - DB_HOST=immich_postgres
      - DB_HOSTNAME=immich_postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE_NAME=immich
      - REDIS_HOST=redis
      - REDIS_HOSTNAME=redis
      - UPLOAD_MAX_TIMEOUT=600000
      - REDIS_PORT=6379
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Asia/Ho_Chi_Minh
      - NODE_ENV=production
      - SERVER_PORT=2283
      - SERVER_HOST=0.0.0.0
      - MAX_FILE_SIZE=10000000000
      - MAX_UPLOAD_SIZE=10000000000
      - MAX_UPLOAD_FILES=100000000
      - UPLOAD_CHUNK_SIZE=100000000
    depends_on:
      immich_postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - ./data/immich-model-cache:/cache
    environment:
      - DB_HOST=immich_postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE_NAME=immich
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PUID=${PUID}
      - PGID=${PGID}
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    environment:
      - DATABASE_URL=postgres://admin:${POSTGRES_PASSWORD}@postgres:5432/shared_db
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=true
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ./data/vaultwarden:/data:rw
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 256M

  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - selfnet
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./data/caddy/data:/data
      - ./data/caddy/config:/config
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    networks:
      - selfnet
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    command: tunnel --no-autoupdate run
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    volumes:
      - ./data/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TZ}
      - HOMEPAGE_ALLOWED_HOSTS=${HOMEPAGE_ALLOWED_HOSTS}
      - PUID=${PUID}
      - PGID=988
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    user: "${PUID}:${PGID}"
    volumes:
      - /:/srv
      - ./data/filebrowser/filebrowser.db:/.filebrowser.db
      - ./data/filebrowser/settings.json:/.settings.json
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - PORTAINER_CSRF_PROTECTION_DISABLED=1
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

networks:
  selfnet:
    driver: bridge
